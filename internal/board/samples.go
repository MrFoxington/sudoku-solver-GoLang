// boards.go (you can place this in internal/board/boards.go)
package board

var BoardEasy = [9][9]int{
	{1, 0, 4, 0, 0, 0, 3, 0, 6},
	{8, 0, 9, 0, 3, 0, 5, 7, 0},
	{0, 0, 0, 0, 7, 0, 1, 0, 0},
	{4, 2, 6, 0, 0, 0, 0, 0, 3},
	{0, 8, 7, 0, 0, 6, 0, 1, 2},
	{3, 0, 0, 0, 0, 0, 0, 0, 9},
	{2, 4, 1, 9, 0, 0, 0, 3, 0},
	{0, 0, 0, 2, 0, 0, 0, 8, 0},
	{7, 0, 0, 5, 0, 3, 0, 0, 0},
}

var BoardHard = [9][9]int{
	{2, 9, 0, 1, 0, 0, 0, 0, 5},
	{0, 7, 0, 0, 5, 0, 0, 0, 0},
	{0, 8, 0, 0, 0, 0, 6, 0, 0},
	{4, 0, 0, 0, 3, 2, 0, 0, 0},
	{0, 0, 5, 8, 0, 7, 2, 0, 0},
	{0, 0, 0, 9, 6, 0, 0, 0, 1},
	{0, 0, 9, 0, 0, 0, 0, 1, 0},
	{0, 0, 0, 0, 2, 0, 0, 5, 0},
	{6, 0, 0, 0, 0, 1, 0, 7, 2},
}

var BoardHard2 = [9][9]int{
	{8, 0, 0, 5, 9, 0, 3, 0, 1},
	{0, 2, 0, 7, 0, 0, 8, 0, 0},
	{0, 0, 0, 8, 0, 0, 0, 0, 2},
	{0, 0, 8, 0, 0, 0, 0, 1, 0},
	{0, 0, 0, 3, 0, 5, 0, 0, 0},
	{0, 4, 0, 0, 0, 0, 5, 0, 0},
	{1, 0, 0, 0, 0, 3, 0, 0, 0},
	{0, 0, 7, 0, 0, 4, 0, 8, 0},
	{5, 0, 9, 0, 7, 8, 0, 0, 6},
}

var BoardEvil = [9][9]int{
	{0, 9, 0, 0, 0, 0, 7, 0, 0},
	{0, 0, 0, 0, 1, 0, 0, 0, 8},
	{0, 2, 0, 6, 0, 9, 0, 0, 0},
	{5, 0, 0, 0, 6, 0, 3, 2, 0},
	{3, 0, 0, 9, 0, 2, 0, 0, 5},
	{0, 6, 2, 0, 3, 0, 0, 0, 4},
	{0, 0, 0, 3, 0, 7, 0, 5, 0},
	{9, 0, 0, 0, 4, 0, 0, 0, 0},
	{0, 0, 6, 0, 0, 0, 0, 4, 0},
}

var BoardEvil2 = [9][9]int{
	{2, 0, 0, 0, 8, 5, 0, 9, 1},
	{0, 0, 0, 2, 0, 0, 0, 7, 0},
	{0, 0, 6, 0, 0, 0, 0, 0, 5},
	{6, 0, 0, 0, 0, 9, 0, 0, 0},
	{0, 9, 3, 0, 0, 0, 1, 4, 0},
	{0, 0, 0, 4, 0, 0, 0, 0, 2},
	{4, 0, 0, 0, 0, 0, 8, 0, 0},
	{0, 1, 0, 0, 0, 8, 0, 0, 0},
	{8, 2, 0, 3, 1, 0, 0, 0, 4},
}

// Helper function to load a predefined board into an existing Board struct
func LoadPredefinedBoard(b *Board, predefined [9][9]int) error {
	for row := 0; row < 9; row++ {
		for col := 0; col < 9; col++ {
			if predefined[row][col] != 0 {
				err := b.SetValue(row, col, predefined[row][col])
				if err != nil {
					return err
				}
			}
		}
	}
	return nil
}
